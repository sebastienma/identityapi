FORMAT: 1A
HOST: http://www.google.com

# Identity API
Identity API is a service which manage users and its preferences.

# Group Authentication
Authentication resources

## Authentication [/auth/subscribe/{nickname}/{email}/{password}]
+ Parameters
    + nickname (required, string, `foobar`) ... `Nickname` of the user which want to login.
    + email (required, string, `dummy@dummy.com`) ... `Email` of the user which want to login.
    + password (required, string, `secret`) ... `Password` of the user which want to login.
    
### Subscribe and connect to the service [POST]
This verb will throw an error if nickname already exist.

+ Response 200 (application/json)

        {
            "nickname": "foobar",
            "authorityList": "ROLE_USER",
            "credentialList": [{
               identity: "dummy@dummy.com",
               secret: "password",
               domain: "internal"
            }],
            "connectionKey":"dGVzdEBnbWFpbC5jb206MTM4NDI2MzM2Njo3NzFhZDMxN2JkYTVhNjdmZjZiNmVkNWJmZGQzNTY3MDgxNzM1MmFkY2RhYTAyMDkzZTBjY2VjZWNkYmE0MmQ2",
            "connectionKeyCreatedDate":1383658566439
        }

## Authentication [/auth/bydeviceid/{deviceid}]
+ Parameters
    + deviceid (required, string, `my-dummy-id`) ... String `deviceid` of the device which want to login.

### Connection with a device identifier [POST]
User is automatically created if not exists.

+ Response 200 (application/json)

        {
            "nickname": "my-dummy-id",
            "authorityList": "ROLE_USER",
            "credentialList": [{
                identity: "dummy@dummy.com",
                secret: "password",
                domain: "internal"
            }],
            "connectionKey":"dGVzdEBnbWFpbC5jb206MTM4NDI2MzM2Njo3NzFhZDMxN2JkYTVhNjdmZjZiNmVkNWJmZGQzNTY3MDgxNzM1MmFkY2RhYTAyMDkzZTBjY2VjZWNkYmE0MmQ2",
            "connectionKeyCreatedDate":1383658566439
        }


## Login [/auth/logout]

### Logout from the service [GET]
Needs ROLE_USER
    
+ Response 200 (application/json)

        {"result": "Logout with success"}
        
        
## Login [/login?username={username}&password={password}]
+ Parameters
    + username (required, string, `dummy@dummy.com`) ... String `username` of the user which want to login.
    + password (required, string, `secret`) ... String `paswword` of the user which want to login.

### Log to the service [GET]
    
+ Response 200 (application/json)

        {
            "id" : "1" ,
            "email" : "test@gmail.com",
            "pseudo" : "toto",
            "permission":"ROLE_USER",
            "favoriteProviderForNotification" : "FACEBOOK",
            "connectionKey":"dGVzdEBnbWFpbC5jb206MTM4NDI2MzM2Njo3NzFhZDMxN2JkYTVhNjdmZjZiNmVkNWJmZGQzNTY3MDgxNzM1MmFkY2RhYTAyMDkzZTBjY2VjZWNkYmE0MmQ2",
            "connectionKeyCreatedDate":1383658566439
        }

## Authentication [/auth/socialapicallback?accessToken={accessToken}&userId={userId}]
+ Parameters
    + accessToken (required, string, `my-wonderfulltoken`) ... `accessToken` of the user which want to login.
    + userId (required, int, `1`) ... `userId` of the user which want to login.

### Authenticate with socialAPI [GET]
This verb is only used by socialAPI. Do not use. Just for internal use.

+ Response 200 (application/json)

        {
            "nickname": "foobar",
            "authorityList": "ROLE_USER",
            "credentialList": [{
                identity: "dummy@dummy.com",
                secret: "password",
                domain: "internal"
            }],
            "connectionKey":"dGVzdEBnbWFpbC5jb206MTM4NDI2MzM2Njo3NzFhZDMxN2JkYTVhNjdmZjZiNmVkNWJmZGQzNTY3MDgxNzM1MmFkY2RhYTAyMDkzZTBjY2VjZWNkYmE0MmQ2",
            "connectionKeyCreatedDate":1383658566439
        }
        
# Group User
User resources

## Single User by nickname [/user/bynickname/{nickname}/]

+ Parameters
    + nickname (required, string, `my-nickname`) ... String `nickname` of the user.

### Retrieve single user by his nickname [GET]
Needs ROLE_USER

+ Response 200 (application/json)

        {
            id: 1,
            nickname: "testaccount",
            authorityList: [
                "ROLE_USER"
            ],
            credentialList: [
                {
                    identity: "test@gmail.com",
                    domain: "internal",
                    connected: true
                },
                {
                    identity: "mydummyguididentity",
                    domain: "device",
                    connected: false
                }
            ]
        }
        

## Single user [/user]

### Subscribe and connect to the service [POST]
Needs ROLE_ADMIN

This verb will throw an error if nickname already exist.

+ Request (application/json)

    + Body
    
            {
                "nickname": "foobar",
                "roleList": ["ROLE_USER"],
                "identity": "dummy@dummy.com",
                "password": "mysecretpassword"
            }
            
+ Response 200 (application/json)

        {
            "nickname": "foobar",
            "authorityList": [
                "ROLE_USER"],
            "credentialList": [{
               identity: "dummy@dummy.com",
               domain: "internal"
            }],
            "connectionKey":"dGVzdEBnbWFpbC5jb206MTM4NDI2MzM2Njo3NzFhZDMxN2JkYTVhNjdmZjZiNmVkNWJmZGQzNTY3MDgxNzM1MmFkY2RhYTAyMDkzZTBjY2VjZWNkYmE0MmQ2",
            "connectionKeyCreatedDate":1383658566439
        }


## User authority [/user/{user_id}/authority/{role_id}]
+ Parameters
    + user_id (required, number, `1`) ... Number `id` of the user.
    + role_id (required, string, `ROLE_USER`) ... Role of the user.

### Set the role for a user [POST]

If ROLE_ADMIN is added, ROLE_USER is added too.

If a lower role is set, all higher roles are deleted.

If user has already at the role {role_id} no error is thrown.

Needs ROLE_ADMIN to use this verb.

+ Response 200 (application/json)

        {
            "result": "Role changed"
        }


## User credential [/user/{user_id}/credential?domain={domain}&identity={identity}]
+ Parameters
    + user_id (required, number, `1`) ... Number `id` of the user.
    + domain (required, string, `internal`) ... Domain of the credential
    + identity (required, string, `my-identity`) ... Identity of the credential

### Delete the credential [DELETE]

Needs ROLE_ADMIN

+ Response 200 (application/json)

        {
            "result": "credential deleted"
        }

        
## Single User [/user/{user_id}/]
+ Parameters
    + user_id (required, number, `1`) ... Number `id` of the user.

### Retreive single user [GET]
Needs ROLE_ADMIN

+ Response 200 (application/json)

        {
            id: 1,
            nickname: "testaccount",
            authorityList: [
                "ROLE_USER"
            ],
            credentialList: [
                {
                    identity: "test@gmail.com",
                    domain: "internal",
                    connected: true
                },
                {
                    identity: "mydummyguididentity",
                    domain: "device",
                    connected: false
                }
            ]
        }

### Delete single user [DELETE]
Needs ROLE_ADMIN

+ Response 200 (application/json)

        {
            "result" : "User Deleted"
        }


## User List [/user/list]

### Retreive user list [GET]
Needs ROLE_ADMIN

+ Response 200 (application/json)

        [
            {
                id: 1,
                nickname: "testaccount",
                authorityList: [
                    "ROLE_USER"
                ],
                credentialList: [
                    {
                        identity: "test@gmail.com",
                        domain: "internal",
                        connected: true
                    },
                    {
                        identity: "mydummyguididentity",
                        domain: "device",
                        connected: false
                    }
                ]
            },
            {
                id: 2,
                nickname: "fdsfds",
                authorityList: [
                    "ROLE_USER"
                ],
                credentialList: [
                    {
                        identity: "fdsfsd@fdsfds.fds",
                        domain: "internal",
                        connected: true
                    }
                ]
            }
        ]