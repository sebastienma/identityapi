FORMAT: 1A
HOST: http://www.google.com

# Identity API

Identity API is a service which manage users and its preferences.

# Group Authentication

Authentication resources

## Authentication [/identity/rest/auth/merge]
    
### Merge account with connected user [POST]

+ Merge an existing account (userA) with an another
+ If account (identity/password) exist (userB):
+ - all userA accesses are moved to userB
+ - Data field is merged, if conflict (same data key) userB data key will be kept.
+ - If data is passed in request, it will overwrite the merged data.
+ - userA is removed
+ If no account exists with (identity/password), identity/password are merged in userA (except if userA have already an identity/password access).
+ A user could'nt have more than one identity/password access, an error wil occurs if userA have already an identity/password access.

+ Request (application/json)

    + Headers
    
            token: tokenid of userA
            
    + Body
    
            {
                "identity" : "identity@mail.com",
                "password" : "12345678",
                "data" : {
                    "name":"jean",
                    "lastname":"blaguin"
                }
            }

+ Response 200 (application/json)

        {
            "id": 56,
            "data" : {
                "name":"jean",
                "lastname":"blaguin"
            },
            "service": {
                "id": 2,
                "name": "OFC",
                "version": "1.0",
                "uniqueDataKeys": ["email"]
            },
            "roleList":
            [
                "ROLE_USER"
            ],
            "token": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "tokenDate": 1387553949708,
            "credentialList":
            [
                {
                    "identity" : "deviceID",
                    "domain" : "DEVICE",
                    "password": "",
                    "accessToken": null
                },
                {
                    "identity" : "identity@mail.com",
                    "domain" : "INTERNAL",
                    "connected" : true,
                    "password": "",
                    "accessToken": null
                }    
            ]    
        }
        
## Authentication [/identity/rest/auth/subscribe]
    
### Subscribe and connect to the service [POST]

+ This verb will throw an error if credential already exist.
+ And if there is an error with the syntaxe of the data
+ A mandatory header 'X-SocialAPI-Service-Name' is required

+ Request (application/json)

    + Headers
    
            X-SocialAPI-Service-Name: name of the service

    + Body
    
            {
                "data" : {
                    "name":"jean",
                    "lastname":"blaguin"
                },
                "identity" : "identity@mail.com",
                "password" : "12345678",
                "role": "ROLE_USER"
            }

+ Response 200 (application/json)

        {
            "id": 56,
            "data" : {
                "name":"jean",
                "lastname":"blaguin"
            },
            "service": {
                "id": 2,
                "name": "OFC",
                "version": "1.0",
                "uniqueDataKeys": ["email"]
            },
            "roleList":
            [
                "ROLE_USER"
            ],
            "token": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "tokenDate": 1387553949708,
            "credentialList":
            [
                {
                    "identity" : "identity@mail.com",
                    "domain" : "internal",
                    "connected" : true,
                    "id" : 57,
                    "userId" : 56,
                    "password": "",
                    "accessToken": null
                }    
            ]    
        }

## Authentication [/identity/rest/auth/bydeviceid/{deviceId}?tokenOnly={tokenOnly}&noData={noData}]

+ Parameters

    + deviceId (required, string, `my-dummy-id`) ... String `deviceid` of the device which want to login.
    + tokenOnly (boolean, `token`) ... Boolean if true, this verb will only return "token" and "tokenExpirationDate" fields. False by default.
    + noData (boolean, `noData`) ... Boolean if true, the data field is not send in response. False by default.

### Connection with a device identifier [POST]

+ User is automatically created if not exists.
+ A mandatory header 'X-SocialAPI-Service-Name' is required

+ Request

    + Headers
    
            X-SocialAPI-Service-Name: name of the service

+ Response 200 (application/json)

        {
            "id": 57,
            "data" : {
                "name":"jean",
                "lastname":"blaguin"
            },
            "service": {
                "id": 2,
                "name": "OFC",
                "version": "1.0",
                "uniqueDataKeys": ["email"]
            },
            "roleList":
            [
                "ROLE_USER"
            ],
            "token": "838f643b59b2fae6a0b18299a74945c3789fa2eb597c174808656da01863b410571dedd94c155d01",
            "tokenExpirationDate": 1387554190248,
            "credentialList":
            [
                {
                    "identity": "011554e6-2fe0-4e49-b2c1-468d12edff88",
                    "domain": "device",
                    "connected": true,
                    "id": 58,
                    "userId": 57,
                    "password": "",
                    "accessToken": "deviceId"
                }
            ]
        }
        
## Login [/identity/rest/auth/logout]

### Logout from the service [GET]

+ Needs ROLE_USER

+ Request

    + Headers
    
            token: the token of currently connected user
            
+ Response 200 (application/json)

        {"result": "Logout with success"}
        
## Login [/identity/rest/auth/login]

### Log to the service [POST]

+ A mandatory header 'X-SocialAPI-Service-Name' is required
+ A Json object must be posted {identity: "", password: ""}
+ The 'identity' is the user internal credential 'identity' field

+ Request

    + Headers
    
            X-SocialAPI-Service-Name: name of the service
            
+ Response 200 (application/json)

        {
            "id": 56,
            "data" : {
                "name":"jean",
                "lastname":"blaguin"
            },
            "service": {
                "id": 2,
                "name": "OFC",
                "version": "1.0",
                "uniqueDataKeys": ["email"]
            },
            "roleList":
            [
                "ROLE_USER"
            ],
            "token": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "tokenDate": 1387553949708,
            "credentialList":
            [
                {
                    "identity" : "identity@mail.com",
                    "domain" : "internal",
                    "connected" : true,
                    "id" : 57,
                    "userId" : 56,
                    "password": "",
                    "accessToken": null
                }    
            ]    
        }

## Social connection url [/identity/rest/auth/social/connect/{domain}/{applicationId}?returnUrl={returnUrl}]

+ Parameters

    + domain (required, string, `facebook`) ... The social `domain` where user want to authenticate, must be a value in (FACEBOOK, LINKEDIN, GOOGLE, TWITTER).
    + applicationId (required, string, `132154312321`) ... The social application which will be used to access the social network.
    + returnUrl (string, `http://www.socialapi.com`) ... An url where return the user after the connection to the social network.

### Start OAuth dance [GET]

+ This will start the OAuth dance.
+ Client applications will redirect the user to this url to authenticate on the social network.
+ An url parameter "success" is returned at the end of the OAuth dance (verb: /identity/rest/auth/social/oauthcode), it contains true if user is correctly connected.
+ Url parameters returned: displayName, permissions, imageUrl, profileUrl
+ Needs ROLE_USER
+ If returnUrl specified, all parameters are transfered to this url
+ Only FACEBOOK is supported for now

+ Request

    + Headers
    
            token: the token of currently connected user
            
+ Response 302


## Social connection url [/identity/rest/auth/social/confirm/{token}]

+ Parameters

    + token (required, string, `132154312321`) ... The token of the current connected user.

### Social callback [GET]

+ This verb is only called by socialAPI. Do not call directly.

+ Request (application/json)

    + Body
    
            { oauthobject: "" }
            
+ Response 200 (application/json)
    
        {
            "result": "ok"
        }


## Social connection url [/identity/rest/auth/social/oauthcode]

### OAuth end process url [GET]

+ This verb will be called at the end of the oauth dance. Do not call directly.
+ If a "returnUrl" parameter is passed to the /identity/rest/auth/social/connect/ verb, a redirect occurs here.
+ An url parameter "success" is returned and contains true if user is correctly connected.
+ Other url parameters returned: displayName, permissions, imageUrl, profileUrl.

+ Response 200 (text/plain)
    
        xxx is now connected on the 'yyy' social network.

+ Response 302

        Redirection to the "returnUrl" parameter. Passed to the /identity/rest/auth/social/connect/ verb at the beginning of the OAuth dance.

# Group User

User resources

## Current user [/identity/rest/user]

### Create a user [POST]

+ Needs ROLE_ADMIN
+ A mandatory header 'X-SocialAPI-Service-Name' is required

+ Request (application/json)

    + Headers
    
            X-SocialAPI-Service-Name: name of the service
            token: the token of currently connected user

    + Body
    
            {
                "data" : {
                    "name":"jean",
                    "lastname":"blaguin"
                },
                "identity" : "identity@mail.com",
                "password" : "12345678"
            }

+ Response 200 (application/json)

        {
            "id": 56,
            "data" : {
                "name":"jean",
                "lastname":"blaguin"
            },
            "service": {
                "id": 2,
                "name": "OFC",
                "version": "1.0",
                "uniqueDataKeys": ["email"]
            },
            "roleList":
            [
                "ROLE_USER"
            ],
            "token": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "tokenDate": 1387553949708,
            "credentialList":
            [
                {
                    "identity" : "identity@mail.com",
                    "domain" : "internal",
                    "connected" : true,
                    "id" : 57,
                    "userId" : 56,
                    "password": "",
                    "accessToken": null
                }    
            ]    
        }

### Get the current connected user [GET]

+ Request

    + Headers
    
            token: the token of currently connected user

+ Response 200 (application/json)

        {
            "id": 56,
            "data" : {
                "name":"jean",
                "lastname":"blaguin"
            },
            "service": {
                "id": 2,
                "name": "OFC",
                "version": "1.0",
                "uniqueDataKeys": ["email"]
            },
            "roleList":
            [
                "ROLE_USER"
            ],
            "token": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "tokenDate": 1387553949708,
            "credentialList":
            [
                {
                    "identity" : "identity@mail.com",
                    "domain" : "internal",
                    "connected" : true,
                    "id" : 57,
                    "userId" : 56,
                    "password": "",
                    "accessToken": null
                }    
            ]    
        }


### Update the current connected user [PUT]

+ Request (application/json)

    + Headers
    
            token: the token of currently connected user
            
    + Body
    
            {
                "id": "1",
                "data" : {
                    "name":"jean",
                    "lastname":"blaguin"
                }
            }
            
+ Response 200 (application/json)

        {
            id: 1,
            "data" : {
                "name":"jean",
                "lastname":"blaguin"
            },
            roleList:[
                "ROLE_USER"
            ],
            "token": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "tokenDate": 1387553949708,
            credentialList: [
                {
                    identity: "identity@mail.com",
                    domain: "internal",
                    connected: true
                },
                {
                    identity: "mydummyguididentity",
                    domain: "device",
                    connected: false
                }
            ]
        }
        
## Current user data [/identity/rest/user/data]

### Retreive user data [GET]

+ Retreive all data of the current connected user as an hashmap

+ Request

    + Headers
    
            token: the token of currently connected user
          
+ Response 200 (application/json)

        {
            "firstname": "Juan",
            "lastname": "Maria",
            "avatar": "http://urltomyavatar.com/image.jpg"
        }
        
### Update user data [PUT]

+ Update user data.
+ All existing data is kept. New data is merged with existing one, if a conflict occurs (same key) value is overwritten.
+ If user has no data, data is created.
+ Unity constraint is applied on fiedls that registered in the associated service.

+ Request (application/json)

    + Headers
    
            token: the token of currently connected user

    + Body
    
            {
                "firstname": "Juan"
            }
    
+ Response 200 (application/json)

        {
            "result": "data updated"
        }

## Data value by key [/identity/rest/user/data/{key}]

+ Parameters

    + key (required, string, `mykey`) ... `key` of the data to retrieve.

### Retreive data for this key [GET]

+ Request

    + Headers
    
            token: the token of currently connected user
          
+ Response 200 (application/json)

        {
            "value": "Juan"
        }


### Update data for this key [PUT]

+ Request

    + Headers
    
            token: the token of currently connected user

    + Body

            {
                "value": "Juan"
            } 

+ Response 200 (application/json)

        {
            "result": "data updated"
        } 
        
### Remove data for this key [DELETE]

+ Data will be removed for this key.

+ Request

    + Headers
    
            token: the token of currently connected user

+ Response 200 (application/json)

        {
            "result": "data removed"
        } 
        
## Single User by its id [/identity/rest/user/{user_id}]

+ Parameters

    + user_id (required, number, `1`) ... Number `id` of the user.

### Retreive single user [GET]

+ Needs ROLE_ADMIN could retreive any user but ROLE_USER could only get its own (or use /identity/rest/user verb).

+ Request

    + Headers
    
            token: the token of currently connected user
            
+ Response 200 (application/json)

        {
            "id": 1,
            "roleList": [
                "ROLE_USER"
            ],
            "token": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "tokenDate": 1387553949708,
            "credentialList": [
                {
                    "identity": "identity@mail.com",
                    "domain": "internal",
                    "connected": true
                },
                {
                    "identity": "mydummyguididentity",
                    "domain": "device",
                    "connected": false
                }
            ]
        }

### Update a user [PUT]

+ ROLE_ADMIN could update any user but ROLE_USER could only update its own.

+ Request (application/json)

    + Headers
    
            token: the token of currently connected user
            
    + Body
    
            {
                "id": "1",
                "data": {
                    "firstname": "name"
                }
            }
            
+ Response 200 (application/json)

        {
            id: 1,
            "data": {
                "firstname": "name"
            },
            roleList:[
                "ROLE_USER"
            ],
            "token": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "tokenDate": 1387553949708,
            credentialList: [
                {
                    identity: "identity@mail.com",
                    domain: "internal",
                    connected: true
                },
                {
                    identity: "mydummyguididentity",
                    domain: "device",
                    connected: false
                }
            ]
        }
        
### Delete single user [DELETE]

+ Needs ROLE_ADMIN

+ Request

    + Headers
    
            token: the token of currently connected user
            
+ Response 200 (application/json)

        {
            "result" : "User Deleted"
        }
        

## User List [/identity/rest/user/list?offset=0&count=5]

+ Parameters

    + offset (required, number, `0`) ... First element of the list
    + count (required, number, `5`) ... Number of element for the list

### Retreive user list [GET]

+ Needs ROLE_ADMIN

+ Request

    + Headers
    
            token: the token of currently connected user
            
+ Response 200 (application/json)

        {
            "data": 
                [
                    {
                        id: 1,
                        roleList: [
                            "ROLE_USER"
                        ],
                        credentialList: [
                            {
                                identity: "identity@mail.com",
                                domain: "internal",
                                connected: true
                            },
                            {
                                identity: "mydummyguididentity",
                                domain: "device",
                                connected: false
                            }
                        ]
                    },
                    {
                        id: 2,
                        roleList: [
                            "ROLE_USER"
                        ],
                        credentialList: [
                            {
                                identity: "identity@mail.com",
                                domain: "internal",
                                connected: true
                            }
                        ]
                    }
                ],
            "nbElt": 2,
            "offset": 0,
            "nbTotal": 2
        }


## User List [/identity/rest/user/resetPassword/{identity}]

+ Parameters

    + identity (required, string, `identity@mail.com`) ... Identity who wants reset his password (for INTERNAL credential)

### Reset password [GET]

+ This will reset the password of the user and send it on his identity (email) 
+ A mandatory header 'X-SocialAPI-Service-Name' is required

+ Request

    + Headers
    
            X-SocialAPI-Service-Name: name of the service


+ Response 200 (application/json)

        {
            "result": "Email sent"
        }

## User role [/identity/rest/user/{user_id}/role/{role_id}]

+ Parameters

    + user_id (required, number, `1`) ... Number `id` of the user.
    + role_id (required, string, `ROLE_USER`) ... Role of the user.

### Set the role for a user [POST]

+ If ROLE_ADMIN is added, ROLE_USER is added too.
+ If a lower role is set, all higher roles are deleted.
+ If user has already at the role {role_id} no error is thrown.
+ Needs ROLE_ADMIN to use this verb.

+ Request

    + Headers
    
            token: the token of currently connected user
            
+ Response 200 (application/json)

        {
            "result": "Role changed"
        }


## Single User by identity [/identity/rest/user/byidentity/{identity}/{domain}]

+ Parameters

    + identity (required, string, `identity`) ... String `identity` of the user to search.
    + domain (required, string, `domain`) ... String `domain` where search (could be: INTERNAL, DEVICE or SOCIAL).

### Retrieve single user by his identity [GET]

+ Needs ROLE_USER
+ Search is strict

+ Response 200 (application/json)

        {
            id: 1,
            roleList: [
                "ROLE_USER"
            ],
            credentialList: [
                {
                    identity: "identity@mail.com",
                    domain: "internal",
                    connected: true
                },
                {
                    identity: "mydummyguididentity",
                    domain: "device",
                    connected: false
                }
            ]
        }
        
## User internal credential [/identity/rest/user/{user_id}/credential/internal]

+ Parameters

    + user_id (required, number, `1`) ... Number `id` of the user.
    
### Create internal credential [POST]

+ Add internal credential to this user

+ Request (application/json)

    + Headers
    
            token: the token of currently connected user
    + Body
    
            {
                "identity": "identity@mail.com"
                "password": "123"
            }
            
+ Response 200 (application/json)

            {
                id: 1,
                roleList: [
                    "ROLE_ADMIN"
                ],
                credentialList: [
                    {
                        identity: "identity@mail.com",
                        domain: "internal",
                        connected: false
                    }
                ]
            }

### Update internal credential [PUT]

+ Update the internal credential of this user

+ Request (application/json)

    + Headers
    
            token: the token of currently connected user
    + Body
    
            {
                "identity": "identity@mail.com"
                "password": "123"
            }
            
+ Response 200 (application/json)

            {
                id: 1,
                roleList: [
                    "ROLE_ADMIN"
                ],
                credentialList: [
                    {
                        identity: "identity@mail.com",
                        domain: "internal",
                        connected: false
                    }
                ]
            }


## User credential [/identity/rest/user/{user_id}/credential?domain={domain}&identity={identity}]

+ Parameters

    + user_id (required, number, `1`) ... Number `id` of the user.
    + domain (required, string, `internal`) ... Domain of the credential
    + identity (required, string, `identity@mail.com`) ... Identity of the credential

### Delete the credential [DELETE]

+ Needs ROLE_ADMIN

+ Request

    + Headers
    
            token: the token of currently connected user
            
+ Response 200 (application/json)

        {
            "result": "Credential deleted"
        }