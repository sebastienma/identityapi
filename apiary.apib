FORMAT: 1A
HOST: http://www.google.com

# Identity API

Identity API is a service which manage users and its preferences.

# Group Authentication

Authentication resources

## Authentication [/auth/subscribe]
    
### Subscribe and connect to the service [POST]

+ This verb will throw an error if nickname or credential already exist.
+ And if there is an error with the syntaxe of the data

+ Request (application/json)

    + Body
    
            {
                "nickname" : "test",
                "avatar" : "http://urlofavatar.com",
                "datas" : "{'name':'jean','lastname':'blaguin'}", 
                "identity" : "test@gmail.com",
                "password" : "12345678",
                "serviceId" : "1"
            }

+ Response 200 (application/json)

        {
            "id": 56,
            "nickname": "test",
            "avatar": "http://urlofavatar.com",
            "datas" : "{'name':'jean','lastname':'blaguin'}",
            "serviceId": 1,
            "authorityList":
            [
                "ROLE_USER"
            ],
            "connectionKey": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "connectionKeyCreatedDate": 1387553949708,
            "credentialList":
            [
                {
                    "identity" : "test@gmail.com",
                    "domain" : "internal",
                    "connected" : true,
                    "id" : 57,
                    "userId" : 56,
                    "secret": "",
                    "accessToken": null
                }    
            ]    
        }

## Authentication [/auth/bydeviceid/{deviceId}/{serviceId}]

+ Parameters

    + deviceId (required, string, `my-dummy-id`) ... String `deviceid` of the device which want to login.
    + serviceId (required, integer, `1`) ... Integer Id of the selected service.

### Connection with a device identifier [POST]

+ User is automatically created if not exists.

+ Response 200 (application/json)

        {
            "id": 57,
            "nickname": "idofthedevice",
            "avatar": null,
            "datas" : "{'name':'jean','lastname':'blaguin'}",
            "serviceId": 1,
            "authorityList":
            [
                "ROLE_USER"
            ],
            "connectionKey": "838f643b59b2fae6a0b18299a74945c3789fa2eb597c174808656da01863b410571dedd94c155d01",
            "connectionKeyCreatedDate": 1387554190248,
            "credentialList":
            [
                {
                    "identity": "011554e6-2fe0-4e49-b2c1-468d12edff88",
                    "domain": "device",
                    "connected": true,
                    "id": 58,
                    "userId": 57,
                    "secret": "",
                    "accessToken": "idofthedevice"
                }
            ]
        }
        
## Login [/auth/logout]

### Logout from the service [GET]

+ Needs ROLE_USER
    
+ Response 200 (application/json)

        {"result": "Logout with success"}
        
        
## Login [/login?username={username}&password={password}&serviceId={serviceId}]

+ Parameters

    + username (required, string, `dummy@dummy.com`) ... String `username` of the user which want to login.
    + password (required, string, `secret`) ... String `paswword` of the user which want to login.
    + serviceId (required, integer, `10`) ... Integer Service identifier which want to login.

### Log to the service [GET]
    
+ Response 200 (application/json)

        {
            "id" : "1" ,
            "email" : "test@gmail.com",
            "pseudo" : "toto",
            "permission":"ROLE_USER",
            "favoriteProviderForNotification" : "FACEBOOK",
            "connectionKey":"dGVzdEBnbWFpbC5jb206MTM4NDI2MzM2Njo3NzFhZDMxN2JkYTVhNjdmZjZiNmVkNWJmZGQzNTY3MDgxNzM1MmFkY2RhYTAyMDkzZTBjY2VjZWNkYmE0MmQ2",
            "connectionKeyCreatedDate":1383658566439
        }

## Authentication [/auth/socialapicallback?accessToken={accessToken}&userId={userId}]

+ Parameters

    + accessToken (required, string, `my-wonderfulltoken`) ... `accessToken` of the user which want to login.
    + userId (required, int, `1`) ... `userId` of the user which want to login.

### Authenticate with socialAPI [GET]

+ This verb is only used by socialAPI. Do not use. Just for internal use.

+ Response 200 (application/json)

        {
            "nickname": "foobar",
            "authorityList": "ROLE_USER",
            "credentialList": [{
                identity: "dummy@dummy.com",
                secret: "password",
                domain: "internal"
            }],
            "connectionKey":"dGVzdEBnbWFpbC5jb206MTM4NDI2MzM2Njo3NzFhZDMxN2JkYTVhNjdmZjZiNmVkNWJmZGQzNTY3MDgxNzM1MmFkY2RhYTAyMDkzZTBjY2VjZWNkYmE0MmQ2",
            "connectionKeyCreatedDate":1383658566439
        }
        
# Group User

User resources

## Single User by nickname [/user/bynickname/{nickname}]

+ Parameters

    + nickname (required, string, `my-nickname`) ... String `nickname` of the user.

### Retrieve single user by his nickname [GET]

+ Needs ROLE_USER
+ Search is strict

+ Response 200 (application/json)

        {
            id: 1,
            nickname: "testaccount",
            authorityList: [
                "ROLE_USER"
            ],
            credentialList: [
                {
                    identity: "test@gmail.com",
                    domain: "internal",
                    connected: true
                },
                {
                    identity: "mydummyguididentity",
                    domain: "device",
                    connected: false
                }
            ]
        }
       
## All users by nickname [/user/bynickname/{nickname}/list?offset=0&count=5]

+ Parameters

    + nickname (required, string, `my-nickname`) ... String `nickname` of the user.
    + offset (required, number, `0`) ... First element of the list
    + count (required, number, `5`) ... Number of element for the list

### Retrieve single user by his nickname [GET]

+ Needs ROLE_USER
+ Also return users that nickname begin with 'nickname'.

+ Response 200 (application/json)

        {
            "data":
            [
                {
                    id: 1,
                    nickname: "testaccount",
                    authorityList: [
                        "ROLE_USER"
                    ],
                    credentialList: [
                        {
                            identity: "test@gmail.com",
                            domain: "internal",
                            connected: true
                        },
                        {
                            identity: "mydummyguididentity",
                            domain: "device",
                            connected: false
                        }
                    ]
                },
        
                {
                    id: 2,
                    nickname: "testaccountdummy",
                    authorityList: [
                        "ROLE_USER"
                    ],
                    credentialList: [
                        {
                            identity: "identity",
                            domain: "device",
                            connected: false
                        }
                    ]
                }
            ],
            "nbElt" : 1,
            "offset" : 0,
            "nbTotal" : 2
        }
        
## Single user [/user]

### Subscribe and connect to the service [POST]

+ Needs ROLE_ADMIN
+ This verb will throw an error if nickname already exist.

+ Request (application/json)

    + Body
    
            {
                "nickname" : "test",
                "avatar" : "http://urlofavatar.com",
                "datas" : "{'name':'jean','lastname':'blaguin'}",
                "identity" : "test@gmail.com",
                "password" : "12345678",
                "serviceId" : "1"
            }

+ Response 200 (application/json)

        {
            "id": 56,
            "nickname": "test",
            "avatar": "http://urlofavatar.com",
            "datas" : "{'name':'jean','lastname':'blaguin'}",
            "serviceId": 1,
            "authorityList":
            [
                "ROLE_USER"
            ],
            "connectionKey": "3bfb25b7a9c40e895b7121c30fdfbaded84fbf5f12b88788839b4011c8ca3ee189abe5aa4b82d92c",
            "connectionKeyCreatedDate": 1387553949708,
            "credentialList":
            [
                {
                    "identity" : "test@gmail.com",
                    "domain" : "internal",
                    "connected" : true,
                    "id" : 57,
                    "userId" : 56,
                    "secret": "",
                    "accessToken": null
                }    
            ]    
        }

    
## Single User [/user/{user_id}]

+ Parameters

    + user_id (required, number, `1`) ... Number `id` of the user.

### Retreive single user [GET]

+ ROLE_ADMIN could retreive any user but ROLE_USER could only get its own.

+ Response 200 (application/json)

        {
            id: 1,
            nickname: "testaccount",
            authorityList: [
                "ROLE_USER"
            ],
            credentialList: [
                {
                    identity: "test@gmail.com",
                    domain: "internal",
                    connected: true
                },
                {
                    identity: "mydummyguididentity",
                    domain: "device",
                    connected: false
                }
            ]
        }

### Update a user [PUT]

+ ROLE_ADMIN could update any user but ROLE_USER could only update its own.

+ Request (application/json)

    + Body
    
            {
                "id": "1"
                "nickname": "foobar"
            }
            
+ Response 200 (application/json)

        {
            "result" : "User modified"
        }
        
### Delete single user [DELETE]

+ Needs ROLE_ADMIN

+ Response 200 (application/json)

        {
            "result" : "User Deleted"
        }

## User profile [/user/{user_id}/profile]

+ Detail of a profile.
+ User must exist.

+ Parameters

    + user_id (required, number, `1`) ... Numeric `id` of the User to perform action with.

### Create a user profile [POST]

+ User need to exist.

+ Request (application/json)

        {   
            "user_id":1, 
            "data": "up to the service"    
        }
        
+ Response 200 (application/json)

        {   
            "user_id":1, 
            "data": "up to the service"    
        }

### Retrieve a profile [GET]

+ Response 200 (application/json)
        
        {   
            "user_id":1, 
            "data": "up to the service"    
        }

### Update a Profile [PUT]

+ Request (application/json)

        {   
            "user_id":1, 
            "data": "up to the service"    
        }
        
+ Response 200 (application/json)

        {
            "user_id":1, 
            "data": "up to the service"    
        } 
        
### Remove a Profile [DELETE]

+ Response 200 (application/json)

        {
            "result": "Profile deleted"
        }
        
## User authority [/user/{user_id}/authority/{role_id}]

+ Parameters

    + user_id (required, number, `1`) ... Number `id` of the user.
    + role_id (required, string, `ROLE_USER`) ... Role of the user.

### Set the role for a user [POST]

+ If ROLE_ADMIN is added, ROLE_USER is added too.
+ If a lower role is set, all higher roles are deleted.
+ If user has already at the role {role_id} no error is thrown.
+ Needs ROLE_ADMIN to use this verb.

+ Response 200 (application/json)

        {
            "result": "Authority changed"
        }

## User internal credential [/user/{user_id}/credential/internal]

+ Parameters

    + user_id (required, number, `1`) ... Number `id` of the user.
    
### Post internal credential [POST]

+ Add internal credential to this user

+ Request (application/json)

    + Body
    
            {
                "identity": "admin"
                "secret": "123"
            }
            
+ Response 200 (application/json)

            {
                id: 1,
                nickname: "admin",
                authorityList: [
                    "ROLE_ADMIN"
                ],
                credentialList: [
                    {
                        identity: "admin",
                        domain: "internal",
                        connected: false
                    }
                ]
            }

## User credential [/user/{user_id}/credential?domain={domain}&identity={identity}]

+ Parameters

    + user_id (required, number, `1`) ... Number `id` of the user.
    + domain (required, string, `internal`) ... Domain of the credential
    + identity (required, string, `my-identity`) ... Identity of the credential

### Delete the credential [DELETE]

+ Needs ROLE_ADMIN

+ Response 200 (application/json)

        {
            "result": "credential deleted"
        }
        

## User List [/user/list?offset=0&count=5]

+ Parameters

    + offset (required, number, `0`) ... First element of the list
    + count (required, number, `5`) ... Number of element for the list

### Retreive user list [GET]

+ Needs ROLE_ADMIN

+ Response 200 (application/json)

        {
            "data": 
                [
                    {
                        id: 1,
                        nickname: "testaccount",
                        authorityList: [
                            "ROLE_USER"
                        ],
                        credentialList: [
                            {
                                identity: "test@gmail.com",
                                domain: "internal",
                                connected: true
                            },
                            {
                                identity: "mydummyguididentity",
                                domain: "device",
                                connected: false
                            }
                        ]
                    },
                    {
                        id: 2,
                        nickname: "fdsfds",
                        authorityList: [
                            "ROLE_USER"
                        ],
                        credentialList: [
                            {
                                identity: "fdsfsd@fdsfds.fds",
                                domain: "internal",
                                connected: true
                            }
                        ]
                    }
                ],
            "nbElt": 2,
            "offset": 0,
            "nbTotal": 2
        }